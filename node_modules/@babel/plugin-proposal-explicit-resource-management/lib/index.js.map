{"version":3,"names":["_helperPluginUtils","require","_pluginTransformDestructuring","_core","isAnonymousFunctionDefinition","node","t","isClassExpression","id","emitSetFunctionNameCall","state","expression","name","callExpression","addHelper","stringLiteral","_default","exports","default","declare","api","assertVersion","TOP_LEVEL_USING","Map","isUsingDeclaration","isVariableDeclaration","kind","has","transformUsingDeclarationsVisitor","ForOfStatement","path","left","declarations","tmpId","scope","generateUidIdentifierBasedOnNode","ensureBlock","unshiftForXStatementBody","variableDeclaration","variableDeclarator","cloneNode","BlockStatement|StaticBlock","availableHelper","ctx","needsAwait","body","generateUidIdentifier","isAwaitUsing","get","delete","decl","currentInit","init","memberExpression","identifier","isIdentifier","disposeCall","replacement","template","statement","ast","awaitExpression","inherits","parentPath","isFunction","isTryStatement","isCatchClause","replaceWith","blockStatement","isStaticBlock","stackId","forEach","args","push","booleanLiteral","errorId","hasErrorId","block","transformUsingDeclarationsVisitorSkipFn","traverse","visitors","merge","Function","skip","manipulateOptions","_","p","plugins","visitor","Program","clear","sourceType","some","innerBlockBody","stmt","isFunctionDeclaration","isImportDeclaration","shouldRemove","isExportDefaultDeclaration","declaration","varId","isClassDeclaration","toExpression","isExpression","exportNamedDeclaration","exportSpecifier","isExportNamedDeclaration","Object","keys","getOuterBindingIdentifiers","map","isExportDeclaration","set","remove","pushContainer","async"],"sources":["../src/index.ts"],"sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\";\nimport { unshiftForXStatementBody } from \"@babel/plugin-transform-destructuring\";\nimport { types as t, template, traverse } from \"@babel/core\";\nimport type { NodePath, Visitor, PluginPass } from \"@babel/core\";\n\nconst enum USING_KIND {\n  NORMAL,\n  AWAIT,\n}\n\n// https://tc39.es/ecma262/#sec-isanonymousfunctiondefinition\n// We don't test anonymous function / arrow function because they must not be disposable\nfunction isAnonymousFunctionDefinition(\n  node: t.Node,\n): node is t.ClassExpression {\n  return t.isClassExpression(node) && !node.id;\n}\n\nfunction emitSetFunctionNameCall(\n  state: PluginPass,\n  expression: t.Expression,\n  name: string,\n) {\n  return t.callExpression(state.addHelper(\"setFunctionName\"), [\n    expression,\n    t.stringLiteral(name),\n  ]);\n}\n\nexport default declare(api => {\n  api.assertVersion(REQUIRED_VERSION(\"^7.22.0\"));\n\n  const TOP_LEVEL_USING = new Map<t.Node, USING_KIND>();\n\n  function isUsingDeclaration(node: t.Node): node is t.VariableDeclaration {\n    if (!t.isVariableDeclaration(node)) return false;\n    return (\n      node.kind === \"using\" ||\n      node.kind === \"await using\" ||\n      TOP_LEVEL_USING.has(node)\n    );\n  }\n\n  const transformUsingDeclarationsVisitor: Visitor<PluginPass> = {\n    ForOfStatement(path: NodePath<t.ForOfStatement>) {\n      const { left } = path.node;\n      if (!isUsingDeclaration(left)) return;\n\n      const { id } = left.declarations[0];\n      const tmpId = path.scope.generateUidIdentifierBasedOnNode(id);\n      left.declarations[0].id = tmpId;\n      left.kind = \"const\";\n\n      path.ensureBlock();\n      unshiftForXStatementBody(path, [\n        t.variableDeclaration(\"using\", [\n          t.variableDeclarator(id, t.cloneNode(tmpId)),\n        ]),\n      ]);\n    },\n    \"BlockStatement|StaticBlock\"(\n      path: NodePath<t.BlockStatement | t.StaticBlock>,\n      state,\n    ) {\n      if (process.env.BABEL_8_BREAKING || state.availableHelper(\"usingCtx\")) {\n        let ctx: t.Identifier | null = null;\n        let needsAwait = false;\n        const scope = path.scope;\n\n        for (const node of path.node.body) {\n          if (!isUsingDeclaration(node)) continue;\n          ctx ??= scope.generateUidIdentifier(\"usingCtx\");\n          const isAwaitUsing =\n            node.kind === \"await using\" ||\n            TOP_LEVEL_USING.get(node) === USING_KIND.AWAIT;\n          needsAwait ||= isAwaitUsing;\n\n          if (!TOP_LEVEL_USING.delete(node)) {\n            node.kind = \"const\";\n          }\n          for (const decl of node.declarations) {\n            const currentInit = decl.init;\n            decl.init = t.callExpression(\n              t.memberExpression(\n                t.cloneNode(ctx),\n                isAwaitUsing ? t.identifier(\"a\") : t.identifier(\"u\"),\n              ),\n              [\n                isAnonymousFunctionDefinition(currentInit) &&\n                t.isIdentifier(decl.id)\n                  ? emitSetFunctionNameCall(state, currentInit, decl.id.name)\n                  : currentInit,\n              ],\n            );\n          }\n        }\n        if (!ctx) return;\n\n        const disposeCall = t.callExpression(\n          t.memberExpression(t.cloneNode(ctx), t.identifier(\"d\")),\n          [],\n        );\n\n        const replacement = template.statement.ast`\n        try {\n          var ${t.cloneNode(ctx)} = ${state.addHelper(\"usingCtx\")}();\n          ${path.node.body}\n        } catch (_) {\n          ${t.cloneNode(ctx)}.e = _;\n        } finally {\n          ${needsAwait ? t.awaitExpression(disposeCall) : disposeCall}\n        }\n      ` as t.TryStatement;\n\n        t.inherits(replacement, path.node);\n\n        const { parentPath } = path;\n        if (\n          parentPath.isFunction() ||\n          parentPath.isTryStatement() ||\n          parentPath.isCatchClause()\n        ) {\n          path.replaceWith(t.blockStatement([replacement]));\n        } else if (path.isStaticBlock()) {\n          path.node.body = [replacement];\n        } else {\n          path.replaceWith(replacement);\n        }\n      } else {\n        let stackId: t.Identifier | null = null;\n        let needsAwait = false;\n\n        for (const node of path.node.body) {\n          if (!isUsingDeclaration(node)) continue;\n          stackId ??= path.scope.generateUidIdentifier(\"stack\");\n          const isAwaitUsing =\n            node.kind === \"await using\" ||\n            TOP_LEVEL_USING.get(node) === USING_KIND.AWAIT;\n          needsAwait ||= isAwaitUsing;\n\n          if (!TOP_LEVEL_USING.delete(node)) {\n            node.kind = \"const\";\n          }\n          node.declarations.forEach(decl => {\n            const args = [t.cloneNode(stackId), decl.init];\n            if (isAwaitUsing) args.push(t.booleanLiteral(true));\n            decl.init = t.callExpression(state.addHelper(\"using\"), args);\n          });\n        }\n        if (!stackId) return;\n\n        const errorId = path.scope.generateUidIdentifier(\"error\");\n        const hasErrorId = path.scope.generateUidIdentifier(\"hasError\");\n\n        let disposeCall: t.Expression = t.callExpression(\n          state.addHelper(\"dispose\"),\n          [t.cloneNode(stackId), t.cloneNode(errorId), t.cloneNode(hasErrorId)],\n        );\n        if (needsAwait) disposeCall = t.awaitExpression(disposeCall);\n\n        const replacement = template.statement.ast`\n        try {\n          var ${stackId} = [];\n          ${path.node.body}\n        } catch (_) {\n          var ${errorId} = _;\n          var ${hasErrorId} = true;\n        } finally {\n          ${disposeCall}\n        }\n      ` as t.TryStatement;\n\n        t.inherits(replacement.block, path.node);\n\n        const { parentPath } = path;\n        if (\n          parentPath.isFunction() ||\n          parentPath.isTryStatement() ||\n          parentPath.isCatchClause()\n        ) {\n          path.replaceWith(t.blockStatement([replacement]));\n        } else if (path.isStaticBlock()) {\n          path.node.body = [replacement];\n        } else {\n          path.replaceWith(replacement);\n        }\n      }\n    },\n  };\n\n  const transformUsingDeclarationsVisitorSkipFn: Visitor<PluginPass> =\n    traverse.visitors.merge([\n      transformUsingDeclarationsVisitor,\n      {\n        Function(path) {\n          path.skip();\n        },\n      },\n    ]);\n\n  return {\n    name: \"proposal-explicit-resource-management\",\n    manipulateOptions: (_, p) => p.plugins.push(\"explicitResourceManagement\"),\n\n    visitor: traverse.visitors.merge([\n      transformUsingDeclarationsVisitor,\n      {\n        // To transform top-level using declarations, we must wrap the\n        // module body in a block after hoisting all the exports and imports.\n        // This might cause some variables to be `undefined` rather than TDZ.\n        Program(path) {\n          TOP_LEVEL_USING.clear();\n\n          if (path.node.sourceType !== \"module\") return;\n          if (!path.node.body.some(isUsingDeclaration)) return;\n\n          const innerBlockBody = [];\n          for (const stmt of path.get(\"body\")) {\n            if (stmt.isFunctionDeclaration() || stmt.isImportDeclaration()) {\n              continue;\n            }\n\n            let node: t.Statement | t.Declaration = stmt.node;\n            let shouldRemove = true;\n\n            if (stmt.isExportDefaultDeclaration()) {\n              let { declaration } = stmt.node;\n              let varId;\n              if (t.isClassDeclaration(declaration)) {\n                varId = declaration.id;\n                // Move the class id to the var binding such that the scope binding\n                // info is correct. Then we clone one to ensure inner class reference\n                // will stay same if the outer binding is mutated.\n                declaration.id = t.cloneNode(varId);\n                declaration = t.toExpression(declaration);\n              } else if (!t.isExpression(declaration)) {\n                continue;\n              }\n\n              varId ??= path.scope.generateUidIdentifier(\"_default\");\n              innerBlockBody.push(\n                t.variableDeclaration(\"var\", [\n                  t.variableDeclarator(varId, declaration),\n                ]),\n              );\n              stmt.replaceWith(\n                t.exportNamedDeclaration(null, [\n                  t.exportSpecifier(\n                    t.cloneNode(varId),\n                    t.identifier(\"default\"),\n                  ),\n                ]),\n              );\n              continue;\n            }\n\n            if (stmt.isExportNamedDeclaration()) {\n              node = stmt.node.declaration;\n              if (!node || t.isFunction(node)) continue;\n\n              stmt.replaceWith(\n                t.exportNamedDeclaration(\n                  null,\n                  Object.keys(t.getOuterBindingIdentifiers(node, false)).map(\n                    id => t.exportSpecifier(t.identifier(id), t.identifier(id)),\n                  ),\n                ),\n              );\n              shouldRemove = false;\n            } else if (stmt.isExportDeclaration()) {\n              continue;\n            }\n\n            if (t.isClassDeclaration(node)) {\n              const { id } = node;\n              node.id = t.cloneNode(id);\n              innerBlockBody.push(\n                t.variableDeclaration(\"var\", [\n                  t.variableDeclarator(id, t.toExpression(node)),\n                ]),\n              );\n            } else if (t.isVariableDeclaration(node)) {\n              if (node.kind === \"using\") {\n                TOP_LEVEL_USING.set(stmt.node, USING_KIND.NORMAL);\n              } else if (node.kind === \"await using\") {\n                TOP_LEVEL_USING.set(stmt.node, USING_KIND.AWAIT);\n              }\n              node.kind = \"var\";\n              innerBlockBody.push(node);\n            } else {\n              innerBlockBody.push(stmt.node);\n            }\n\n            if (shouldRemove) stmt.remove();\n          }\n\n          path.pushContainer(\"body\", t.blockStatement(innerBlockBody));\n        },\n        // We must transform `await using` in async functions before that\n        // async-to-generator will transform `await` expressions into `yield`\n        Function(path, state) {\n          if (path.node.async) {\n            path.traverse(transformUsingDeclarationsVisitorSkipFn, state);\n          }\n        },\n      },\n    ]),\n  };\n});\n"],"mappings":"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","ignoreList":[]}
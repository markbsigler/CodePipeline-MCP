name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    services:
      docker:
        image: docker:24.0.5-dind
        options: --privileged
    steps:
      # Cache npm dependencies for faster installs
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install Docker Compose V2
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          docker compose version
      - name: Run npm audit (SCA)
        run: npm audit --audit-level=high || true
      - name: Install dependencies
        run: npm ci
      - name: Build Docker image
        run: docker build --no-cache -t mcp-server:ci .
      - name: Debug installed versions in image
        run: docker run --rm mcp-server:ci npm ls brace-expansion cross-spawn || true
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: mcp-server:ci
          format: table
          exit-code: 1
          ignore-unfixed: true
      - name: Start containers
        run: docker compose up -d
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      - name: Wait for container health
        run: |
          for i in {1..20}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' mcp-server 2>/dev/null || echo "starting")
            if [ "$STATUS" = "healthy" ]; then
              echo "Container is healthy!"
              exit 0
            fi
            echo "Waiting for container health... (status: $STATUS)"
            sleep 2
          done
          echo "Container did not become healthy in time."
          docker compose ps
          docker compose logs
          exit 1
      - name: Run integration tests
        run: npm run test:integration
      - name: Run coverage
        run: npm run test:coverage || npx jest --coverage --config jest.config.cjs
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/lcov-report
      - name: Run k6 streaming test
        run: |
          docker run --rm -i grafana/k6 run - < tests/load/streaming.k6.js
      - name: Stop containers
        run: docker compose down
# If you split jobs in the future, add 'needs:' to control job dependencies.
